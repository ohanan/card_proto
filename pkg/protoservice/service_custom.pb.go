// Code generated by protoc-gen-card-proto-plugin. DO NOT EDIT.

package protoservice

import (
	context "context"
	proto "github.com/ohanan/card_proto/pkg/protoservice/proto"
	grpc "google.golang.org/grpc"
)

type HostXClient struct {
	c HostClient
}

func NewHostXClient(c HostClient) *HostXClient {
	return &HostXClient{c: c}
}
func (x HostXClient) GetPlayerInfo(userId string) *proto.GetPlayerInfo_Resp {
	r, err := x.c.GetPlayerInfo(context.Background(), &proto.GetPlayerInfo_Req{
		UserId: userId,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x HostXClient) GetPlayerInfo0(req *proto.GetPlayerInfo_Req) *proto.GetPlayerInfo_Resp {
	r, err := x.c.GetPlayerInfo(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}
func (x HostXClient) RegisterNotify(event []string) *proto.RegisterNotify_Resp {
	r, err := x.c.RegisterNotify(context.Background(), &proto.RegisterNotify_Req{
		Event: event,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x HostXClient) RegisterNotify0(req *proto.RegisterNotify_Req) *proto.RegisterNotify_Resp {
	r, err := x.c.RegisterNotify(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}
func (x HostXClient) AskAction(actions []*proto.Action) *proto.AskAction_Resp {
	r, err := x.c.AskAction(context.Background(), &proto.AskAction_Req{
		Actions: actions,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x HostXClient) AskAction0(req *proto.AskAction_Req) *proto.AskAction_Resp {
	r, err := x.c.AskAction(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}

type HostXServer interface {
	GetPlayerInfo(req *proto.GetPlayerInfo_Req, resp *proto.GetPlayerInfo_Resp)
	RegisterNotify(req *proto.RegisterNotify_Req, resp *proto.RegisterNotify_Resp)
	AskAction(req *proto.AskAction_Req, resp *proto.AskAction_Resp)
}

func NewHostClientFromServer(x HostServer) HostClient {
	return &hostClientByServer{s: x}
}

type hostClientByServer struct{ s HostServer }

func (x hostClientByServer) GetPlayerInfo(ctx context.Context, req *proto.GetPlayerInfo_Req, opts ...grpc.CallOption) (*proto.GetPlayerInfo_Resp, error) {
	return x.s.GetPlayerInfo(ctx, req)
}
func (x hostClientByServer) RegisterNotify(ctx context.Context, req *proto.RegisterNotify_Req, opts ...grpc.CallOption) (*proto.RegisterNotify_Resp, error) {
	return x.s.RegisterNotify(ctx, req)
}
func (x hostClientByServer) AskAction(ctx context.Context, req *proto.AskAction_Req, opts ...grpc.CallOption) (*proto.AskAction_Resp, error) {
	return x.s.AskAction(ctx, req)
}
func NewHostServerFromXServer(server HostXServer) HostServer {
	return &hostXServerAdapter{Server: server}
}

type hostXServerAdapter struct {
	Server HostXServer
}

func (x *hostXServerAdapter) GetPlayerInfo(ctx context.Context, req *proto.GetPlayerInfo_Req) (*proto.GetPlayerInfo_Resp, error) {
	resp := &proto.GetPlayerInfo_Resp{}
	x.Server.GetPlayerInfo(req, resp)
	return resp, nil
}
func (x *hostXServerAdapter) RegisterNotify(ctx context.Context, req *proto.RegisterNotify_Req) (*proto.RegisterNotify_Resp, error) {
	resp := &proto.RegisterNotify_Resp{}
	x.Server.RegisterNotify(req, resp)
	return resp, nil
}
func (x *hostXServerAdapter) AskAction(ctx context.Context, req *proto.AskAction_Req) (*proto.AskAction_Resp, error) {
	resp := &proto.AskAction_Resp{}
	x.Server.AskAction(req, resp)
	return resp, nil
}

type PluginXClient struct {
	c PluginClient
}

func NewPluginXClient(c PluginClient) *PluginXClient {
	return &PluginXClient{c: c}
}
func (x PluginXClient) GetPluginInfo() *proto.GetPluginInfo_Resp {
	r, err := x.c.GetPluginInfo(context.Background(), &proto.GetPluginInfo_Req{})
	if err != nil {
		panic(err)
	}
	return r
}
func (x PluginXClient) GetPluginInfo0(req *proto.GetPluginInfo_Req) *proto.GetPluginInfo_Resp {
	r, err := x.c.GetPluginInfo(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}
func (x PluginXClient) StartMode(name string, seed uint64) *proto.StartMode_Resp {
	r, err := x.c.StartMode(context.Background(), &proto.StartMode_Req{
		Name: name,
		Seed: seed,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x PluginXClient) StartMode0(req *proto.StartMode_Req) *proto.StartMode_Resp {
	r, err := x.c.StartMode(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}

type PluginXServer interface {
	GetPluginInfo(helper *Helper, req *proto.GetPluginInfo_Req, resp *proto.GetPluginInfo_Resp)
	StartMode(helper *Helper, req *proto.StartMode_Req, resp *proto.StartMode_Resp)
}

func NewPluginClientFromServer(x PluginServer) PluginClient {
	return &pluginClientByServer{s: x}
}

type pluginClientByServer struct{ s PluginServer }

func (x pluginClientByServer) GetPluginInfo(ctx context.Context, req *proto.GetPluginInfo_Req, opts ...grpc.CallOption) (*proto.GetPluginInfo_Resp, error) {
	return x.s.GetPluginInfo(ctx, req)
}
func (x pluginClientByServer) StartMode(ctx context.Context, req *proto.StartMode_Req, opts ...grpc.CallOption) (*proto.StartMode_Resp, error) {
	return x.s.StartMode(ctx, req)
}
func NewPluginServerFromXServer(server PluginXServer) PluginServer {
	return &pluginXServerAdapter{Server: server}
}

type pluginXServerAdapter struct {
	Server PluginXServer
	*Helper
}

func (x *pluginXServerAdapter) GetPluginInfo(ctx context.Context, req *proto.GetPluginInfo_Req) (*proto.GetPluginInfo_Resp, error) {
	resp := &proto.GetPluginInfo_Resp{}
	x.Server.GetPluginInfo(x.Helper, req, resp)
	return resp, nil
}
func (x *pluginXServerAdapter) StartMode(ctx context.Context, req *proto.StartMode_Req) (*proto.StartMode_Resp, error) {
	resp := &proto.StartMode_Resp{}
	x.Server.StartMode(x.Helper, req, resp)
	return resp, nil
}
