// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: card.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Card_GetPlayerInfo_FullMethodName  = "/proto.Card/GetPlayerInfo"
	Card_RegisterNotify_FullMethodName = "/proto.Card/RegisterNotify"
)

// CardClient is the client API for Card service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardClient interface {
	GetPlayerInfo(ctx context.Context, in *GetPluginInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoResp, error)
	RegisterNotify(ctx context.Context, in *RegisterNotifyReq, opts ...grpc.CallOption) (*RegisterNotifyResp, error)
}

type cardClient struct {
	cc grpc.ClientConnInterface
}

func NewCardClient(cc grpc.ClientConnInterface) CardClient {
	return &cardClient{cc}
}

func (c *cardClient) GetPlayerInfo(ctx context.Context, in *GetPluginInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoResp, error) {
	out := new(GetPlayerInfoResp)
	err := c.cc.Invoke(ctx, Card_GetPlayerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) RegisterNotify(ctx context.Context, in *RegisterNotifyReq, opts ...grpc.CallOption) (*RegisterNotifyResp, error) {
	out := new(RegisterNotifyResp)
	err := c.cc.Invoke(ctx, Card_RegisterNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServer is the server API for Card service.
// All implementations should embed UnimplementedCardServer
// for forward compatibility
type CardServer interface {
	GetPlayerInfo(context.Context, *GetPluginInfoReq) (*GetPlayerInfoResp, error)
	RegisterNotify(context.Context, *RegisterNotifyReq) (*RegisterNotifyResp, error)
}

// UnimplementedCardServer should be embedded to have forward compatible implementations.
type UnimplementedCardServer struct {
}

func (UnimplementedCardServer) GetPlayerInfo(context.Context, *GetPluginInfoReq) (*GetPlayerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerInfo not implemented")
}
func (UnimplementedCardServer) RegisterNotify(context.Context, *RegisterNotifyReq) (*RegisterNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNotify not implemented")
}

// UnsafeCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServer will
// result in compilation errors.
type UnsafeCardServer interface {
	mustEmbedUnimplementedCardServer()
}

func RegisterCardServer(s grpc.ServiceRegistrar, srv CardServer) {
	s.RegisterService(&Card_ServiceDesc, srv)
}

func _Card_GetPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_GetPlayerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetPlayerInfo(ctx, req.(*GetPluginInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_RegisterNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).RegisterNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_RegisterNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).RegisterNotify(ctx, req.(*RegisterNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Card_ServiceDesc is the grpc.ServiceDesc for Card service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Card_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Card",
	HandlerType: (*CardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerInfo",
			Handler:    _Card_GetPlayerInfo_Handler,
		},
		{
			MethodName: "RegisterNotify",
			Handler:    _Card_RegisterNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card.proto",
}

const (
	Plugin_GetPluginInfo_FullMethodName = "/proto.Plugin/GetPluginInfo"
)

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	GetPluginInfo(ctx context.Context, in *GetPluginInfoReq, opts ...grpc.CallOption) (*GetPluginInfoResp, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoReq, opts ...grpc.CallOption) (*GetPluginInfoResp, error) {
	out := new(GetPluginInfoResp)
	err := c.cc.Invoke(ctx, Plugin_GetPluginInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations should embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	GetPluginInfo(context.Context, *GetPluginInfoReq) (*GetPluginInfoResp, error)
}

// UnimplementedPluginServer should be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) GetPluginInfo(context.Context, *GetPluginInfoReq) (*GetPluginInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plugin_GetPluginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetPluginInfo(ctx, req.(*GetPluginInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPluginInfo",
			Handler:    _Plugin_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card.proto",
}
