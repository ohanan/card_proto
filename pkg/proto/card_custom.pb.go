// Code generated by protoc-gen-card-proto-plugin. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
)

type CardXClient struct {
	c CardClient
}

func NewCardXClient(c CardClient) *CardXClient {
	return &CardXClient{c: c}
}
func (x CardXClient) GetPlayerInfo(userId string) *GetPlayerInfo_Resp {
	r, err := x.c.GetPlayerInfo(context.Background(), &GetPlayerInfo_Req{
		UserId: userId,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x CardXClient) GetPlayerInfo0(req *GetPlayerInfo_Req) *GetPlayerInfo_Resp {
	r, err := x.c.GetPlayerInfo(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}
func (x CardXClient) RegisterNotify(event []string) *RegisterNotify_Resp {
	r, err := x.c.RegisterNotify(context.Background(), &RegisterNotify_Req{
		Event: event,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x CardXClient) RegisterNotify0(req *RegisterNotify_Req) *RegisterNotify_Resp {
	r, err := x.c.RegisterNotify(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}

type CardXServer interface {
	GetPlayerInfo(req *GetPlayerInfo_Req, resp *GetPlayerInfo_Resp)
	RegisterNotify(req *RegisterNotify_Req, resp *RegisterNotify_Resp)
}

func NewCardClientFromServer(x CardServer) CardClient {
	return &cardClientByServer{s: x}
}

type cardClientByServer struct{ s CardServer }

func (x cardClientByServer) GetPlayerInfo(ctx context.Context, req *GetPlayerInfo_Req, opts ...grpc.CallOption) (*GetPlayerInfo_Resp, error) {
	return x.s.GetPlayerInfo(ctx, req)
}
func (x cardClientByServer) RegisterNotify(ctx context.Context, req *RegisterNotify_Req, opts ...grpc.CallOption) (*RegisterNotify_Resp, error) {
	return x.s.RegisterNotify(ctx, req)
}
func NewCardServerFromXServer(server CardXServer) *CardXServerAdapter {
	return &CardXServerAdapter{Server: server}
}

type CardXServerAdapter struct {
	Server CardXServer
}

func (x CardXServerAdapter) GetPlayerInfo(ctx context.Context, req *GetPlayerInfo_Req) (*GetPlayerInfo_Resp, error) {
	resp := &GetPlayerInfo_Resp{}
	x.Server.GetPlayerInfo(req, resp)
	return resp, nil
}
func (x CardXServerAdapter) RegisterNotify(ctx context.Context, req *RegisterNotify_Req) (*RegisterNotify_Resp, error) {
	resp := &RegisterNotify_Resp{}
	x.Server.RegisterNotify(req, resp)
	return resp, nil
}

type PluginXClient struct {
	c PluginClient
}

func NewPluginXClient(c PluginClient) *PluginXClient {
	return &PluginXClient{c: c}
}
func (x PluginXClient) GetPluginInfo() *GetPluginInfo_Resp {
	r, err := x.c.GetPluginInfo(context.Background(), &GetPluginInfo_Req{})
	if err != nil {
		panic(err)
	}
	return r
}
func (x PluginXClient) GetPluginInfo0(req *GetPluginInfo_Req) *GetPluginInfo_Resp {
	r, err := x.c.GetPluginInfo(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}

type PluginXServer interface {
	GetPluginInfo(remote CardXClient, req *GetPluginInfo_Req, resp *GetPluginInfo_Resp)
}

func NewPluginClientFromServer(x PluginServer) PluginClient {
	return &pluginClientByServer{s: x}
}

type pluginClientByServer struct{ s PluginServer }

func (x pluginClientByServer) GetPluginInfo(ctx context.Context, req *GetPluginInfo_Req, opts ...grpc.CallOption) (*GetPluginInfo_Resp, error) {
	return x.s.GetPluginInfo(ctx, req)
}
func NewPluginServerFromXServer(server PluginXServer) *PluginXServerAdapter {
	return &PluginXServerAdapter{Server: server}
}

type PluginXServerAdapter struct {
	Server PluginXServer
	Client CardXClient
}

func (x PluginXServerAdapter) GetPluginInfo(ctx context.Context, req *GetPluginInfo_Req) (*GetPluginInfo_Resp, error) {
	resp := &GetPluginInfo_Resp{}
	x.Server.GetPluginInfo(x.Client, req, resp)
	return resp, nil
}
