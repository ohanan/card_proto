// Code generated by protoc-gen-card-proto-plugin. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
)

type CardXClient struct {
	c CardClient
}

func NewCardXClient(c CardClient) *CardXClient {
	return &CardXClient{c: c}
}
func (x CardXClient) GetPlayerInfo() *GetPlayerInfoResp {
	r, err := x.c.GetPlayerInfo(context.Background(), &GetPluginInfoReq{})
	if err != nil {
		panic(err)
	}
	return r
}
func (x CardXClient) GetPlayerInfo0(req *GetPluginInfoReq) *GetPlayerInfoResp {
	r, err := x.c.GetPlayerInfo(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}
func (x CardXClient) RegisterNotify(event []string) *RegisterNotifyResp {
	r, err := x.c.RegisterNotify(context.Background(), &RegisterNotifyReq{
		Event: event,
	})
	if err != nil {
		panic(err)
	}
	return r
}
func (x CardXClient) RegisterNotify0(req *RegisterNotifyReq) *RegisterNotifyResp {
	r, err := x.c.RegisterNotify(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}

type CardXServer interface {
	GetPlayerInfo(req *GetPluginInfoReq, resp *GetPlayerInfoResp)
	RegisterNotify(req *RegisterNotifyReq, resp *RegisterNotifyResp)
}

func NewCardClientFromServer(x CardServer) CardClient {
	return &cardClientByServer{s: x}
}

type cardClientByServer struct{ s CardServer }

func (x cardClientByServer) GetPlayerInfo(ctx context.Context, req *GetPluginInfoReq, opts ...grpc.CallOption) (*GetPlayerInfoResp, error) {
	return x.s.GetPlayerInfo(ctx, req)
}
func (x cardClientByServer) RegisterNotify(ctx context.Context, req *RegisterNotifyReq, opts ...grpc.CallOption) (*RegisterNotifyResp, error) {
	return x.s.RegisterNotify(ctx, req)
}
func NewCardServerFromXServer(server CardXServer) *CardXServerAdapter {
	return &CardXServerAdapter{Server: server}
}

type CardXServerAdapter struct {
	Server CardXServer
}

func (x CardXServerAdapter) GetPlayerInfo(ctx context.Context, req *GetPluginInfoReq) (*GetPlayerInfoResp, error) {
	resp := &GetPlayerInfoResp{}
	x.Server.GetPlayerInfo(req, resp)
	return resp, nil
}
func (x CardXServerAdapter) RegisterNotify(ctx context.Context, req *RegisterNotifyReq) (*RegisterNotifyResp, error) {
	resp := &RegisterNotifyResp{}
	x.Server.RegisterNotify(req, resp)
	return resp, nil
}

type PluginXClient struct {
	c PluginClient
}

func NewPluginXClient(c PluginClient) *PluginXClient {
	return &PluginXClient{c: c}
}
func (x PluginXClient) GetPluginInfo() *GetPluginInfoResp {
	r, err := x.c.GetPluginInfo(context.Background(), &GetPluginInfoReq{})
	if err != nil {
		panic(err)
	}
	return r
}
func (x PluginXClient) GetPluginInfo0(req *GetPluginInfoReq) *GetPluginInfoResp {
	r, err := x.c.GetPluginInfo(context.Background(), req)
	if err != nil {
		panic(err)
	}
	return r
}

type PluginXServer interface {
	GetPluginInfo(remote CardXClient, req *GetPluginInfoReq, resp *GetPluginInfoResp)
}

func NewPluginClientFromServer(x PluginServer) PluginClient {
	return &pluginClientByServer{s: x}
}

type pluginClientByServer struct{ s PluginServer }

func (x pluginClientByServer) GetPluginInfo(ctx context.Context, req *GetPluginInfoReq, opts ...grpc.CallOption) (*GetPluginInfoResp, error) {
	return x.s.GetPluginInfo(ctx, req)
}
func NewPluginServerFromXServer(server PluginXServer) *PluginXServerAdapter {
	return &PluginXServerAdapter{Server: server}
}

type PluginXServerAdapter struct {
	Server PluginXServer
	Client CardXClient
}

func (x PluginXServerAdapter) GetPluginInfo(ctx context.Context, req *GetPluginInfoReq) (*GetPluginInfoResp, error) {
	resp := &GetPluginInfoResp{}
	x.Server.GetPluginInfo(x.Client, req, resp)
	return resp, nil
}
